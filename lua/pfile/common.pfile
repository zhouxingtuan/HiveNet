
typedef long long		unique_long;
typedef unsigned int	unique_int;
typedef unsigned short	unique_short;
typedef unsigned char	unique_char;

class Unique
{
	virtual inline unique_int getIndex(void) const { return m_uniqueHandle.getIndex(); }
	virtual inline unique_short getVersion(void) const { return m_uniqueHandle.getVersion(); }
	virtual inline unique_long getHandle(void) const { return m_uniqueHandle.getHandle(); }
	virtual inline unique_char getType(void) const { return m_uniqueHandle.getType(); }
	virtual inline std::string getClassName(void) const {
		return "Unique";
	}
};

class Packet
{
	static Packet* createPacket(int length);
	void retain(void);
	void release(void);
	inline void setCursor(int cur){ m_cursor = cur; }
	inline int write(const char* ptr, int length);
	inline int read(void* ptr, int length);
	inline char readByte(void){
		char c = 0;
		read(&c, 1);
		return c;
	}
	inline void writeByte(char c){
		write(&c, 1);
	}
	virtual inline std::string getClassName(void) const {
		return "Packet";
	}
};// end class Packet

